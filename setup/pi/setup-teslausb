#!/bin/bash -eu

if [ "$BASH_SOURCE" != "$0" ]
then
  echo "$BASH_SOURCE must be executed, not sourced"
  return 1 # shouldn't use exit when sourced
fi

if [ "${FLOCKED:-}" != "$0" ]
then
  if FLOCKED="$0" flock -en -E 99 "$0" "$0" "$@" || case "$?" in
  99) echo already running
      exit 99
      ;;
  *)  exit $?
      ;;
  esac
  then
    # success
    exit 0
  fi
fi

HEADLESS_SETUP=${HEADLESS_SETUP:-false}
if [ "$HEADLESS_SETUP" = "false" -a -t 0 ]
then
  # running in terminal in non-headless mode
  if [ -f /boot/teslausb_setup_variables.conf -o -f /root/teslausb_setup_variables.conf ]
  then
    # headless setup variables are available
    read -p "Read setup info from teslausb_setup_variables.conf (yes/no/cancel)?" answer
    case ${answer:0:1} in
      y|Y )
          HEADLESS_SETUP=true
      ;;
      n|N )
      ;;
      * )
          exit
      ;;
    esac
  fi
fi

REPO=${REPO:-marcone}
BRANCH=${BRANCH:-main-dev}
USE_LED_FOR_SETUP_PROGRESS=true
CONFIGURE_ARCHIVING=${CONFIGURE_ARCHIVING:-true}
UPGRADE_PACKAGES=${UPGRADE_PACKAGES:-true}
TESLAUSB_HOSTNAME=${TESLAUSB_HOSTNAME:-teslausb}
SAMBA_ENABLED=${SAMBA_ENABLED:-false}
SAMBA_GUEST=${SAMBA_GUEST:-false}
export camsize=${camsize:-90%}
export musicsize=${musicsize:-100%}

function setup_progress () {
  local setup_logfile=/boot/teslausb-headless-setup.log
  if [ $HEADLESS_SETUP = "true" ]
  then
    echo "$( date ) : $1" >> "$setup_logfile"
  fi
  echo $1
}

if ! [ $(id -u) = 0 ]
then
  setup_progress "STOP: Run sudo -i."
  exit 1
fi

function headless_setup_populate_variables () {
  # Pull in the conf file variables to make avail to this script and subscripts
  # If setup-teslausb is run from rc.local, the conf file will have been moved
  # to /root by rc.local
  if [ $HEADLESS_SETUP = "true" ]
  then
    if [ -e /boot/teslausb_setup_variables.conf ]
    then
      setup_progress "reading config from /boot/teslausb_setup_variables.conf"
      source /boot/teslausb_setup_variables.conf
    elif [ -e /root/teslausb_setup_variables.conf ]
    then
      setup_progress "reading config from /root/teslausb_setup_variables.conf"
      source /root/teslausb_setup_variables.conf
    else
      setup_progress "couldn't find config file"
    fi
  fi
}

function headless_setup_mark_setup_success () {
  if [ $HEADLESS_SETUP = "true" ]
  then

    if [ -e /boot/TESLAUSB_SETUP_FAILED ]
    then
      rm /boot/TESLAUSB_SETUP_FAILED
    fi

    rm -f /boot/TESLAUSB_SETUP_STARTED
    touch /boot/TESLAUSB_SETUP_FINISHED
    setup_progress "Main setup completed."
  fi
}

function headless_setup_progress_flash () {
  if [ $USE_LED_FOR_SETUP_PROGRESS = "true" ] && [ $HEADLESS_SETUP = "true" ]
  then
    /etc/stage_flash $1
  fi
}

function setup_led_off () {

  if [ $USE_LED_FOR_SETUP_PROGRESS = "true" ] && [ $HEADLESS_SETUP = "true" ]
  then
    echo "none" | sudo tee /sys/class/leds/led0/trigger > /dev/null
    echo 1 | sudo tee /sys/class/leds/led0/brightness > /dev/null
  fi
}

function setup_led_on () {

  if [ $USE_LED_FOR_SETUP_PROGRESS = "true" ] && [ $HEADLESS_SETUP = "true" ]
  then
    echo 0 | sudo tee /sys/class/leds/led0/brightness > /dev/null
  fi
}

function verify_configuration () {
  get_script /tmp verify-configuration.sh setup/pi
  
  /tmp/verify-configuration.sh
}

function get_script () {
  local local_path="$1"
  local name="$2"
  local remote_path="${3:-}"
  
  curl --fail -o "$local_path/$name" https://raw.githubusercontent.com/"$REPO"/teslausb/"$BRANCH"/"$remote_path"/"$name"
  # wget -O "$local_path/$name" https://raw.githubusercontent.com/"$REPO"/teslausb/"$BRANCH"/"$remote_path"/"$name"
  chmod +x "$local_path/$name"
  setup_progress "Downloaded $local_path/$name ..."
}

function get_ancillary_setup_scripts () {
  get_script /tmp create-backingfiles-partition.sh setup/pi
  get_script /tmp create-backingfiles.sh setup/pi
  get_script /tmp make-root-fs-readonly.sh setup/pi
  get_script /tmp configure.sh setup/pi
}

function fix_cmdline_txt_modules_load ()
{
  setup_progress "Fixing the modules-load parameter in /boot/cmdline.txt..."
  cp /boot/cmdline.txt ~
  cat ~/cmdline.txt | sed 's/ modules-load=dwc2,g_ether/ modules-load=dwc2/' > /boot/cmdline.txt
  rm ~/cmdline.txt
  setup_progress "Fixed cmdline.txt."
}

BACKINGFILES_MOUNTPOINT=/backingfiles
MUTABLE_MOUNTPOINT=/mutable

function create_usb_drive_backing_files () {
  if [ ! -e "$BACKINGFILES_MOUNTPOINT" ]
  then
    mkdir "$BACKINGFILES_MOUNTPOINT"
  fi

  if [ ! -e "$MUTABLE_MOUNTPOINT" ]
  then
    mkdir "$MUTABLE_MOUNTPOINT"
  fi

  /tmp/create-backingfiles-partition.sh "$BACKINGFILES_MOUNTPOINT" "$MUTABLE_MOUNTPOINT"
  
  if ! findmnt --mountpoint $BACKINGFILES_MOUNTPOINT
  then
    setup_progress "Mounting the partition for the backing files..."
    mount $BACKINGFILES_MOUNTPOINT
    setup_progress "Mounted the partition for the backing files."
  fi

  if [ ! -e $BACKINGFILES_MOUNTPOINT/cam_disk.bin ]
  then
    setup_progress "Creating backing disk files."
    /tmp/create-backingfiles.sh "$camsize" "$musicsize" "$BACKINGFILES_MOUNTPOINT"
  fi
}

function configure_hostname () {
  # Headless image already has hostname set
  if [ ! $HEADLESS_SETUP = "true" ]
  then
    setup_progress "Configuring the hostname..."

    local new_host_name="$TESLAUSB_HOSTNAME"
    cp /etc/hosts ~
    sed "s/raspberrypi/$new_host_name/g" ~/hosts > /etc/hosts
    rm ~/hosts

    cp /etc/hostname ~
    sed "s/raspberrypi/$new_host_name/g" ~/hostname > /etc/hostname
    setup_progress "Configured the hostname."
    rm ~/hostname
  fi
}

function make_root_fs_readonly () {
  /tmp/make-root-fs-readonly.sh
}

function update_package_index () {
  setup_progress "Updating package index files..."
  apt-get update
}

function upgrade_packages () {
  if [ "$UPGRADE_PACKAGES" = true ]
  then
    setup_progress "Upgrading installed packages..."
    apt-get --assume-yes upgrade
  else
    setup_progress "Skipping package upgrade."
  fi
}

function set_timezone () {
  if [ ! -z ${timezone:+x} ]
  then
    if [ -f "/usr/share/zoneinfo/$timezone" ]
    then
      ln -sf "/usr/share/zoneinfo/$timezone" /etc/localtime
    elif [ "$timezone" = "auto" ]
    then
      if curl -o /root/bin/tzupdate.py https://raw.githubusercontent.com/marcone/tzupdate/develop/tzupdate.py
      then
        apt-get -y --force-yes install python-requests
        chmod +x /root/bin/tzupdate.py
        if ! tzout=$(/root/bin/tzupdate.py 2>&1)
        then
          setup_progress "auto timezone failed: $tzout"
        else
          setup_progress "$tzout"
        fi
      fi
    else
      setup_progress "invalid timezone: $timezone"
    fi
  fi
}

export -f setup_progress
export HEADLESS_SETUP

headless_setup_populate_variables

if [ "${1:-}" = "selfupdate" ]
then
  get_script /tmp setup-teslausb setup/pi &> /dev/null
  if cmp -s /tmp/setup-teslausb /root/bin/setup-teslausb
  then
    setup_progress "already up to date"
  else
    /root/bin/remountfs_rw > /dev/null
    mv /tmp/setup-teslausb /root/bin/setup-teslausb
    setup_progress "$0 updated"
  fi
  exit 0
fi

update_package_index

# If USE_LED_FOR_SETUP_PROGRESS = true. 
setup_led_off

# set time zone so we get decent timestamps in the rest of the setup log
set_timezone

# Flash for stage 2 headless (verify requested configuration)
headless_setup_progress_flash 1

setup_progress "Verifying that the requested configuration is valid..."

verify_configuration

# Flash for Stage 3 headless (grab scripts)
headless_setup_progress_flash 2

setup_progress "Downloading additional setup scripts."

get_ancillary_setup_scripts

pushd ~

fix_cmdline_txt_modules_load

# Flash for stage 4 headless (Create backing files)
headless_setup_progress_flash 3

create_usb_drive_backing_files

configure_hostname

# Flash for stage 5 headless (Mark success, FS readonly)
headless_setup_progress_flash 4

headless_setup_mark_setup_success

if [ "$CONFIGURE_ARCHIVING" = true ]
then
  setup_progress "calling configure.sh"
  /tmp/configure.sh
else
  setup_progress "skipping configure.sh"
fi

if [ "$SAMBA_ENABLED" = "true" ]
then
  export SAMBA_GUEST
  get_script /tmp/ configure-samba.sh setup/pi
  get_script /root/bin smb-on.sh run
  get_script /root/bin smb-off.sh run
  /tmp/configure-samba.sh
fi

make_root_fs_readonly

upgrade_packages

# If USE_LED_FOR_SETUP_PROGRESS = true. 
setup_led_on

setup_progress "All done."
